#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}



@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;

    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;

    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;

    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 98%;

    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;

    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;

    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;

    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;

    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 222.2 84% 4.9%;

    --radius: 0.5rem;

    --sidebar-background: 0 0% 98%;

    --sidebar-foreground: 240 5.3% 26.1%;

    --sidebar-primary: 240 5.9% 10%;

    --sidebar-primary-foreground: 0 0% 98%;

    --sidebar-accent: 240 4.8% 95.9%;

    --sidebar-accent-foreground: 240 5.9% 10%;

    --sidebar-border: 220 13% 91%;

    --sidebar-ring: 217.2 91.2% 59.8%;
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;

    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;

    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;

    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 11.2%;

    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;

    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;

    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;

    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;

    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 212.7 26.8% 83.9%;
    --sidebar-background: 240 5.9% 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 224.3 76.3% 48%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
}

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply bg-background text-foreground;
  }
}


Это css одного сайта. Сделай что-бы мой сайт выглядел точно также.
Мой сайт:

from flask import Flask, request, redirect, render_template_string, url_for
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, UserMixin, login_user, logout_user, login_required, current_user
from werkzeug.security import generate_password_hash, check_password_hash
from datetime import datetime
import html
import click

# Инициализация приложения
app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///forum.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['SECRET_KEY'] = 'your-secret-key-here'  # Замените на свой секретный ключ

db = SQLAlchemy(app)
login_manager = LoginManager(app)
login_manager.login_view = 'login'


# Модели данных
class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(50), unique=True, nullable=False)
    password_hash = db.Column(db.String(128), nullable=False)
    is_admin = db.Column(db.Boolean, default=False)
    posts = db.relationship('Post', backref='author', lazy=True)
    replies = db.relationship('Reply', backref='author', lazy=True)


class Post(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    content = db.Column(db.Text, nullable=False)
    date = db.Column(db.DateTime, default=datetime.utcnow)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    replies = db.relationship('Reply', backref='post', lazy=True, cascade='all, delete-orphan')


class Reply(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    content = db.Column(db.Text, nullable=False)
    date = db.Column(db.DateTime, default=datetime.utcnow)
    post_id = db.Column(db.Integer, db.ForeignKey('post.id'), nullable=False)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)


# Загрузчик пользователя
@login_manager.user_loader
def load_user(user_id):
    return db.session.get(User, int(user_id))


# Базовый HTML шаблон
def base_html(content):
    return f'''
    <!DOCTYPE html>
    <html>
    <head>
        <title>Форум</title>
        <style>
            body {{ font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }}
            .post {{ border: 1px solid #ddd; padding: 15px; margin-bottom: 20px; border-radius: 5px; }}
            .reply {{ margin-left: 30px; margin-top: 10px; }}
            .meta {{ color: #666; font-size: 0.9em; margin-bottom: 10px; }}
            textarea {{ width: 100%; height: 100px; }}
            button {{ background: #4CAF50; color: white; border: none; padding: 10px 15px; cursor: pointer; }}
        </style>
    </head>
    <body>
        <h1>Форум</h1>
        {content}
    </body>
    </html>
    '''


# Маршруты
@app.route('/')
def index():
    posts = Post.query.order_by(Post.date.desc()).all()
    posts_html = []

    for post in posts:
        replies_html = ''.join(
            f'<div class="reply"><div class="meta">@{reply.author.username} - {reply.date.strftime("%d.%m.%Y %H:%M")}</div>'
            f'<div>{html.escape(reply.content).replace("\n", "<br>")}</div></div>'
            for reply in post.replies
        )

        posts_html.append(f'''
            <div class="post">
                <div class="meta">@{post.author.username} - {post.date.strftime("%d.%m.%Y %H:%M")} (ID: {post.id})</div>
                <div>{html.escape(post.content).replace("\n", "<br>")}</div>
                <form method="POST" action="/reply/{post.id}">
                    <textarea name="content" required placeholder="Ваш ответ..."></textarea>
                    <button type="submit">Ответить</button>
                </form>
                {replies_html}
            </div>
        ''')

    return render_template_string(base_html(
        f'''
        <form method="POST" action="/post">
            <textarea name="content" required placeholder="Новое сообщение..."></textarea>
            <button type="submit">Опубликовать</button>
        </form>
        <h2>Сообщения</h2>
        {''.join(posts_html)}
        '''
    ))


@app.route('/post', methods=['POST'])
@login_required
def create_post():
    content = request.form['content']
    post = Post(content=content, author=current_user)
    db.session.add(post)
    db.session.commit()
    return redirect(url_for('index'))


@app.route('/reply/<int:post_id>', methods=['POST'])
@login_required
def reply(post_id):
    content = request.form['content']
    reply = Reply(content=content, post_id=post_id, author=current_user)
    db.session.add(reply)
    db.session.commit()
    return redirect(url_for('index'))


@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        user = User.query.filter_by(username=request.form['username']).first()
        if user and check_password_hash(user.password_hash, request.form['password']):
            login_user(user)
            return redirect(url_for('index'))
        return render_template_string(base_html('<div style="color:red;">Неверные данные</div>'))

    return render_template_string(base_html('''
        <form method="POST">
            <input type="text" name="username" placeholder="Логин" required><br>
            <input type="password" name="password" placeholder="Пароль" required><br>
            <button type="submit">Войти</button>
        </form>
    '''))


@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        if User.query.filter_by(username=username).first():
            return render_template_string(base_html('<div style="color:red;">Пользователь уже существует</div>'))

        hashed_pw = generate_password_hash(request.form['password'])
        user = User(username=username, password_hash=hashed_pw)
        db.session.add(user)
        db.session.commit()
        return redirect(url_for('login'))

    return render_template_string(base_html('''
        <form method="POST">
            <input type="text" name="username" placeholder="Логин" required><br>
            <input type="password" name="password" placeholder="Пароль" required><br>
            <button type="submit">Зарегистрироваться</button>
        </form>
    '''))


@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('index'))


# CLI команды
@app.cli.command("create-admin")
@click.argument("username")
@click.argument("password")
def create_admin(username, password):
    hashed_pw = generate_password_hash(password)
    admin = User(username=username, password_hash=hashed_pw, is_admin=True)
    db.session.add(admin)
    db.session.commit()
    print(f"Администратор {username} создан")


# Запуск приложения
if __name__ == '__main__':
    with app.app_context():
        db.create_all()
    app.run(host='0.0.0.0', port=5000, debug=True)
